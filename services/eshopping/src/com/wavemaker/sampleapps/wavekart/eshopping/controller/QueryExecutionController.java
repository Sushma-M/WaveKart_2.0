/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/
package com.wavemaker.sampleapps.wavekart.eshopping.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.sampleapps.wavekart.eshopping.service.EshoppingQueryExecutorService;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController(value = "Eshopping.QueryExecutionController")
@Api(value = "QueryExecutionController", description = "Controller class for query execution")
@RequestMapping("/eshopping/queryExecutor")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private EshoppingQueryExecutorService queryService;

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/DeleteCartItems_LoggedUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeDeleteCartItems_LoggedUser(@RequestParam(value = "LoggedUserCartId", required = false) java.lang.Integer LoggedUserCartId) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query DeleteCartItems_LoggedUser");
        int result = queryService.executeDeleteCartItems_LoggedUser(LoggedUserCartId);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/Get_CartIdByUserid", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeGet_CartIdByUserid(Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query Get_CartIdByUserid");
        Page<Object> result = queryService.executeGet_CartIdByUserid(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/Get_CartItems_id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeGet_CartItems_id(@RequestParam(value = "Cid", required = false) java.lang.Integer Cid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query Get_CartItems_id");
        Page<Object> result = queryService.executeGet_CartItems_id(pageable, Cid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/GetCount_OrderLineItems", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeGetCount_OrderLineItems(@RequestParam(value = "OrderId", required = false) java.lang.Integer OrderId, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query GetCount_OrderLineItems");
        Page<Object> result = queryService.executeGetCount_OrderLineItems(pageable, OrderId);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/MyCart_Items_Count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeMyCart_Items_Count(Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query MyCart_Items_Count");
        Page<Object> result = queryService.executeMyCart_Items_Count(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/Total_OrderedQty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeTotal_OrderedQty(@RequestParam(value = "orderid", required = false) java.lang.Integer orderid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query Total_OrderedQty");
        Page<Object> result = queryService.executeTotal_OrderedQty(pageable, orderid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/TotalItemsPrice_CartProd", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeTotalItemsPrice_CartProd(@RequestParam(value = "cartId", required = false) java.lang.Integer cartId, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query TotalItemsPrice_CartProd");
        Page<Object> result = queryService.executeTotalItemsPrice_CartProd(pageable, cartId);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/TotalPrice_CartProd", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeTotalPrice_CartProd(@RequestParam(value = "cartid", required = false) java.lang.Integer cartid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query TotalPrice_CartProd");
        Page<Object> result = queryService.executeTotalPrice_CartProd(pageable, cartid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/TotalPrice_Orders", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeTotalPrice_Orders(@RequestParam(value = "Oid", required = false) java.lang.Integer Oid, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query TotalPrice_Orders");
        Page<Object> result = queryService.executeTotalPrice_Orders(pageable, Oid);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
        Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }
}
